UNet2d(
  (c0x0): DoubleConv(
    (conv_block): Sequential(
      (0): Conv2d(2, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): LeakyReLU(negative_slope=0.01, inplace=True)
      (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): LeakyReLU(negative_slope=0.01, inplace=True)
    )
  )
  (encoder): ModuleList(
    (0): EncodeBlock2d(
      (pool): MaxPool2d(kernel_size=(2, 2), stride=(2, 2), padding=(0, 0), dilation=1, ceil_mode=False)
      (double_conv): DoubleConv(
        (conv_block): Sequential(
          (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.01, inplace=True)
          (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (1): EncodeBlock2d(
      (pool): MaxPool2d(kernel_size=(2, 2), stride=(2, 2), padding=(0, 0), dilation=1, ceil_mode=False)
      (double_conv): DoubleConv(
        (conv_block): Sequential(
          (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.01, inplace=True)
          (2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (2): EncodeBlock2d(
      (pool): MaxPool2d(kernel_size=(2, 2), stride=(2, 2), padding=(0, 0), dilation=1, ceil_mode=False)
      (double_conv): DoubleConv(
        (conv_block): Sequential(
          (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.01, inplace=True)
          (2): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
  )
  (decoder): ModuleList(
    (0): DecodeBlock2d(
      (upsampling): Sequential(
        (0): Upsample(scale_factor=(2.0, 2.0), mode='bilinear')
        (1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1))
      )
      (double_conv): DoubleConv(
        (conv_block): Sequential(
          (0): Conv2d(1024, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.01, inplace=True)
          (2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (1): DecodeBlock2d(
      (upsampling): Sequential(
        (0): Upsample(scale_factor=(2.0, 2.0), mode='bilinear')
        (1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
      )
      (double_conv): DoubleConv(
        (conv_block): Sequential(
          (0): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.01, inplace=True)
          (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (2): DecodeBlock2d(
      (upsampling): Sequential(
        (0): Upsample(scale_factor=(2.0, 2.0), mode='bilinear')
        (1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
      )
      (double_conv): DoubleConv(
        (conv_block): Sequential(
          (0): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.01, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
  )
  (c1x1): Conv2d(128, 2, kernel_size=(1, 1), stride=(1, 1))
)